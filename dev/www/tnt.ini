;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TNT-SYNERGY: PHP Application Framework                            v2.0.00 ;;
;; ======================================                                    ;;
;;                                                                           ;;
;; Copyright (c) 2003 by Nick Turner                                         ;;
;; mail:info@tnt-synergy.com                                                 ;;
;; http:;;www.tnt-synergy.com;                                               ;;
;;                                                                           ;;
;; TNT-SYNERGY is a PHP Application Framework. It encourages application     ;;
;; structured application architectures based on the "Model2" version of the ;;
;; Model View Controller (MVC) design paradigm. The framework supports the   ;;
;; following key features:                                                   ;;
;;     - Model                                                               ;;
;;         - session persistance (PHP Sessions)                              ;;
;;         - permanent persistance (Database library abstraction)            ;;
;;         - authentication (Multi-user)                                     ;;
;;         - authorization (Access control)                                  ;;
;;         - application model (Object based view of web page)               ;;
;;     - Control                                                             ;;
;;        - state processing (Page states)                                   ;;
;;        - event processing (User supplied events)                          ;;
;;     - View                                                                ;;
;;        - themes (application and;or user themes)                          ;;
;;        - template based presentation (Template library abstraction)       ;;
;;        - internationalisation (Multi-language support)                    ;;
;;                                                                           ;;
;; This program is free software. You can redistribute it and;or modify it   ;;
;; under the terms of the GNU General Public License as published by the     ;;
;; Free Software Foundation; either version 2 of the License, or (at your    ;;
;; option) any later version.                                                ;;
;;                                                                           ;;
;;   #####################################################################   ;;
;;   # This program is distributed in the hope that it will be useful,   #   ;;
;;   # but WITHOUT ANY WARRANTY; without even the implied warranty of    #   ;;
;;   # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU #   ;;
;;   # General Public License for more details.                          #   ;;
;;   #####################################################################   ;;
;;                                                                           ;;
;; TNT-Synergy is a wholly owned subsidiary of TurnerTronics. The project is ;;
;; open development and is the culmination of many peoples time and effort.  ;;
;; For a full list of developers and copyrights please refer to CREDITS.TXT  ;;
;;                                                                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Registry
; ========
; 
; This file hold the initial registry state.


; General information
; ~~~~~~~~~~~~~~~~~~~
;
; + name			          - short web site name
; + desc			          - longer website description
; + systemPath          - file system path to installed code base
; + serverPath          - web server path to installed code base
;
; The 'systemPath' is always equal to TNT_ROOT_DIR, changing from this value
; should be done with caution. This can be effectively treated as a read only
; value in most circumstances.
;
; The 'serverPath' is automatically calculated if no value is specified in the
; initialisation files. Sometimes this calculation can be incorrect especially
; on unusual or complicated host setups, when this happens the correct value
; must be set in the initialisation files.
[General]
name = "TNT-Synergy"
desc = "TNT-SYNERGY is a PHP Application Framework"
systemPath = TNT_ROOT_DIR
serverPath = TNT_ROOT_URI

; Database details
; ~~~~~~~~~~~~~~~~
;
; + dsn		              - DSN "phptype(dbsyntax)://user:pass@protocol+host/name"
; + prefix              - database table prefix
; + table.X             - database table X name
;
; The Data Source Name (DSN) can be given in its broken down format as follows;
; + dsn.phptype         - database backend used in PHP
; + dsn.dbsyntax        - database SQL syntax etc.
; + dsn.protocol        - database communication protocol
; + dsn.host            - database host name
; + dsn.port            - database port number
; + dsn.name            - database schema name
; + dsn.user            - database user for login
; + dsn.pass            - database password for login
;
; The 'prefix' field can be used to set a table prefix. This allows the tables
; to co-exist with other uses of the database when an ISP only allows one
; database to be created. In this case simply set the database name to the
; name of the single allocated database and set this prefix to a unique value.
;
; The 'table.X' fields are used to define database table mappings. Each table
; name can be mapped to a different real table in the database. For example;
; 'table.users = clients' would make all database requests for data in the
; users table actual make request to a table called 'clients'. The main use for
; this is if you have another module which offers similar functionality to a
; standard table and you wish to use an enhanced table from that module. The
; fieldnames in the alternative table must match those from the standard table.
; Any table prefix is ignored when a mapped table name is used.
;
[TNT.Database]
dsn = "mysql://root:clough@localhost/tnt_synergy2"
prefix = "tnt_"
tables =

; Front End Controller Router
; ~~~~~~~~~~~~~~~~~~~~~~~~~~~
;
; This routes requests to the correct module given a request path.
;
; This is usefull when an installation has no access to using the Apache
; mod_rewrite module.
;
; Routes are specified as;
;
;   pattern = params [flags]
;
; where 'pattern' is the pattern to match against the request path and params
; is a URL query formatted parameter list to use for the request when the
; patterm matches. flags can be used to modify the routing algorithm.
; 
; The pattern can be specified in either static or regex format.
;
; In static format 'directories' in the path can be named and their value
; will be put into the params list automatically with that name. Eg. the
; pattern "user/:username" will match the path "user/fred" and place an entry
; in the params as 'username' => 'fred'. Normally the number of directories in
; the pattern must exactly match the number in the path, to allow trailing
; directories end the pattern with '/*'.
;
; In regex format the pattern is indicated by surrounding the pattern with
; '?' characters, this matched against the path and subpatterns can be placed
; in the params string using the '$N' notation. The regex pattern can match any
; part of the path, just use the normal regex '^' and '$' metacharacters to
; anchor the pattern to the start and end of the path respectively.
;
; If the pattern only matches part of the path then the leading section and
; trailing section can be refered to using the '$<' and '$>' notation in
; the params string. Alternatively these can be automatically split and added
; to the parameter string using the '<x' and '>x' flags, where 'x' is the
; character to split upon. If the '/' is split on then the directories are
; added in pairs, otherwise any other character splits the directory and adds
; parameters in the form '<left> => '<right>'. If the split character is not in
; the directory then '<left>' is an sequential number and '<right>' is the
; directory name.
;
; The following flags are understood
;   !   - this route takes priority over other routes that may match.
;   i   - ignore case when matching the route.
;   *   - equivalent to '>/' flag
;   <x  - split any non matched leading section and place in the params
;   >x  - split any non matched trailing section and place in the params
; 
; Examples;
;   path:     'user/fred/age/45/gender/male'
;   route:    'user/:username' => controller=UserController&action=view'
;   params:   no match as has trailing directories
;
;   path:     'user/fred/age/45/gender/male'
;   route:    'user/:username/*' => controller=UserCtrl&action=view'
;   params:   array('controller' => 'UserCtrl', 'action' => 'view')
;
;   path:     'User/fred/age/45/gender/male'
;   route:    'user/:username/*' => controller=UserCtrl&action=edit [i*]'
;   params:   array('controller' => 'UserCtrl', 'action' => 'edit',
;                   'age' => 45, 'gender' => male)
;
;   path:     'user/fred/age/45/gender/male'
;   route:    '?^user/(\w+)$?' => controller=UserCtrl&action=view'
;   params:   no match as has trailing directories
;
;   path:     'user/fred/age/45/gender/male'
;   route:    '?user/(\w+)?' => controller=UserCtrl&action=view&pfx=$-&sfx=$+'
;   params:   array('controller' => 'UserCtrl', 'action' => 'edit',
;                   'pfx' => '', 'sfx' => 'age/45/gender/male')
;
;   path:     'user/fred/age=45/gender=male'
;   route:    'user/:username/*' => controller=UserCtrl&action=edit [-=]'
;   params:   array('controller' => 'UserCtrl', 'action' => 'edit',
;                   'age' => 45, 'gender' => male)
;
; The subsequent request should include the controller and action parameters
; where the controller parameter specifies the name of the the Controller class
; required to process the action.
;
; If after parsing the routes the controller and action parameters are still
; not set in the route then the values 'TNTDefaultController' and 'index' are
; used respectively. These default values can be altered using the
; 'TNT.Ctrl.DefaultController' and 'TNT.Ctrl.DefaultAction' registry values.
;
; If access to Apache mod_rewrite or similar is available then the routing
; can be done there by injecting controller and action parameters into the
; URL. If the Request object sees the controller parameter already set then
; it will not attempt to parse the routes in order to find it.
;
;
[TNT.Ctrl]
DefaultController = TNTDefaultController
DefaultAction = Action

[TNT.Ctrl.Routes]

; VFS details
; ~~~~~~~~~~~
;
; VFS is the virtual filesystem. You can use the virtual filesystem to refer to
; paths whose value may not be known at file creation time. A virtual path is
; indication using a tilde (~) prefix.
;
; + 'vfs.dirs' - an array of virtual to real path mappings. Each sub key is
;   assumed to map a virtual root to its real path. The value can one of the
;   following;
;     - str:<string>
;     - php:<php_code>|<function_name>|<class_name>::<method_name>
;
;   If no 'str:' or 'php:' prefix is given then 'str:' is assumed. For the
;   'php:' prefix any php code should modify the given $path variable. Any
;   function or static class method will be passed a reference to the $path
;   to modify.
;  
;   If no mapping for a virtual root is found then the root is assumed to be
;   relative. (ie. '~/unknown/fred.txt' => './unknown/fred.txt')
;
;   A virtual path is assumed to be an absolute path but is expected to map to
;   a path relative to the installation root. It can however be mapped directly
;   to a another virtual path or to an absolute path. When one virtual path map
;   to another the replacement recurses until no further matches can be made.
;
; + 'vfs.vars' - an array of replacement variables to search for and replace
;   in any virtual path. Each subkey is a variable to replace and its value
;   is the what to replace the variable with. As in 'vfs.paths' the value can
;   be either a plain string or php code where the code is passed the variable
;   and is expected to return the replacement string value.
;
; The TNT Framework uses the virtual file system for its internal paths thus
; allowing them all to be configured as required.
;
;
[TNT.VFS.Dirs]
theme = "~/themes/TNT-Synergy"

; Site details
; ~~~~~~~~~~~~
;
; Sites allows multiple sites to share the same code base but use different
; INI settings (and therefore possibly different databases and data directories)
;
; To create a new site create a '[Site.XXXX]' section where 'XXXX' is a unique
; name for the site. In this section you can use the following keys;
; 
; + request             - a pattern that must match the current request
; + inifile             - the name of an ini file to load for this site.
;
; The 'request' value is used to match against the full request URL to find the
; correct site to use. If the match starts with '?' then it is assumed to be
; a regular expression, otherwise it is assume to be a string to match against
; the URL.
;
; The 'inifile' will be loaded after this INI file and any local application
; INI file have been loaded.
;
[Site.GingerNation]
request = "http://www.gingernation.com/"
inifile = "~sites/GingerNation/live.ini"

; Template Details
; ~~~~~~~~~~~~~~~~
;
; Template parser configuration
;
;
[TNT.templates.smarty]
left_delimiter = "{"
right_delimiter = "}"
default_modifiers = 
autoload_filters = 
debugging = true
error_reporting =
debugging_ctrl = "URL"
compile_check = true
force_compile = true
caching = 0
cache_lifetime = 3600
cache_modified_check = false
php_handling = SMARTY_PHP_PASSTHRU
security = false


; Default Module Details
; ~~~~~~~~~~~~~~~~~~~~~~
;
; The default example module serves up pages
;
; + document_root       - file system path to find page files to process
; + extensions          - file extensions to process as page template files
;
[Module.Default]
document_root = "~data/pages/"
extensions = ".htm,.html,.shtm,.shtml"

; /* vim: set expandtab tabstop=2 shiftwidth=2: */
